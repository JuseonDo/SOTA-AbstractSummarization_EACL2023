@summary
know what core programming is.

@summary
learn a programming language that supports building reusable components/packages, if you have not done so already.

@summary
,

@summary
take an advanced course in uml and orm.

@summary
take a course in software engineering.

@summary
,

@summary
learn at least modular, component-based, object-oriented, and event-driven programming techniques and concepts.

@summary
learn more about the different operating systems and programming frameworks supported by these operating systems.

@summary
,

@summary
focus your learning efforts on platform-independent frameworks, programming languages and technologies.

@summary
,

@summary
if the programming languages you learned so far have ansi/iso/ieee/w3c standard versions, master the standards.

@summary
try to mimic simple, already established libraries, especially open-source ones.

@summary
search for and try open-source packages in your field of programming.

@summary
learn the different approaches used to distribute and deploy components to programmers.
@article
 Core programmers are merely advanced programmers who made the transfer from programming applications to programming code units to be used by other programmers.
, Most library developers use one or both of them.
, The more programming paradigms and languages you cover, the more successful you become as a library/package programmer.
,, Try to use standard code whenever possible.
 This is useful during the early phase of becoming a library/package programmer. Start with simple packages like units conversion and intermediate scientific calculations packages. If you are a college student, make use of your non-programming courses by trying to implement their equations and scientific core as libraries.
 First download binaries/executables of the package. Try to use it and find its strong and weak points. After you've done that, download the source and try to figure out how it was done. Try to recreate those libraries or parts of them. At first, do that after you've seen the code and later before you see the code. At later phases, try improving those libraries.



Usually, library/package programmers tend to think recursively and/or iteratively of all problems they are presented with. Try to think of each problem as a collection of smaller problems (a sequence of simpler tasks) or as a repeated process of reducing the problem's scope to smaller scopes and then piling those scopes upon each other.
Library/package programmers tend to generalize. That is, when presented with a simple specific problem, they usually think of a more general problem and try to solve that general problem which will automatically solve the smaller one.

