@summary
start off with a web page that you have added a google javascript api map to.

@summary
create a text box input for the user to enter the street address.

@summary
create a button input for the user to click to geocode the address.

@summary
declare a variable outside of the initialize function so that it is available in any javascript code, this will store the geocode class object.

@summary
set the geocoder variable equal to an instance of the google maps geocoder class as new google maps geocoder() inside the initialize() function.

@summary
add a second function to your javascript code, call it codeaddress.

@summary
make sure that the first line of the function uses getelementbyid to get the address from the text box and place it into a variable we'll call saddress.

@summary
call the geocode method of the geocoder object, this will take two passed-in parameters.

@summary
the callback function should first check the status value of the callback function.

@summary
if the status equals ok, call the setcenter method of the map object variable.

@summary
next, use the same result geometry location to add a map marker to the map object variable.

@summary
finally we're going to add an alert message to the else to let the user know that the geocode didn't work like it should have.

@summary
you can now give it a go!
@article
;
,
Address: <input type="text" id="inputTextAddress" style=" width:200px" title="Address to Geocode">

,
<input type="button" onclick="codeAddress()" id="inputButtonGeocode" style="width:150px" title="Click to Geocode" value="Click to Geocode">

,
var geocoder;

,
geocoder = new google.maps.Geocoder();

, It will not have any values passed to it.
function codeAddress() { }

,
var sAddress = document.getElementById(" inputTextAddress").value;

, The first is the GeocoderRequest, this says what kind of request is being made and what the request value is. The second is the callback function that will be used to process the results.
geocoder.geocode( { 'address': sAddress}, function(results, status) { });

, Use an IF statement to test the result, check to see if the status equal google.maps.GeocoderStatus.OK. Also add an ELSE clause to the IF statement as well.
if (status == google.maps.GeocoderStatus.OK) {
}
else{
}

, You will pass this method to get the result's first geometry location.
map.setCenter(results.geometry.location);

, Create a new variable – we'll call it oMarker – it will be created as a new google.maps.Marker. The new method takes two parameters, the first is the map object that you're adding the marker to, and the second is the position to place the marker, which is again the first results geometry location.
var marker = new google.maps.Marker({
 map: map,
 position: results.geometry.location
});

, You can use the status to give a bit more information rather than just saying that it didn't work.
alert("Geocode was not successful for the following reason: " + status);

, Type in an address, or simply a city and state, or even something as simple as a state name! You'll see the map move to the new location and add a marker to the map!
The live page for this example can be viewed and used through a link from the sources and citations area if you scroll down!

