@summary
have a good idea of what your program will do.

@summary
if you already know another programming language just start learning the syntax and looking up equivalents to various commands.

@summary
learn how to compile and run a basic program, this will be your first program, typically it will just print "hello world" to the screen and exit.learn about variable types (integer, real, character, logical)

@summary
,

@summary
learn about the concept of variables, arrays, functions, and subroutines.

@summary
learn conditional statements, such as the "if" and "select case" statements.

@summary
learn loops and the "exit" and "cycle" statements.

@summary
,

@summary
learn about subroutines and functions.

@summary
,learn recursion (f90 and later) and other advanced topics

@summary
,

@summary
read or look up some books on scientific programming.

@summary
a simple "hello world" code:

@summary
note: you have to space each line over 7 spaces

@summary
c hello.f -- hello world program

@summary
c public domain

@summary
program hello

@summary
write(*,*) 'hello world'

@summary
end program

@summary
write(*,*) means "write some unformatted text to standard output"

@summary
why the spaces?,

@summary
remember that fortran 90 introduced the "free form" source code, allowing code to be written without the spaces and without the 72 character limit.

@summary
compile the two fortran files:

@summary
.

@summary
speed up your code by writing efficient code.
@article
 Think about what sort of data is needed as input, how to structure the output, and include some intermediate output so you can monitor the progress of your calculation. This will be very useful if you know your calculation will run for a long time or involves multiple complicated steps.
 Otherwise, you should do this:

, Don't worry about all the minor details of the syntax, just become comfortable with compiling and running.
, Variables are where information is stored, functions and subroutines are pieces of code that can be executed, and arrays are groups of variables.
 The "IF" statement will be one of your most frequently used statements, you can execute code based on whether a condition is true or not (e.g. whether the color the user provided was red).
,,, For example, the book "Numerical Recipes in Fortran" is both a good text on scientific programming algorithms and a good introduction to how to put together codes. More recent editions include chapters on how to program in a mixed-language environment and parallel programming. Another example is "Modern Fortran in Practice" written by Arjen Markus. The book gives an insight into how to write Fortran programs in twenty-first-century style in accordance with the latest Fortran standards., This is a relic from the past. In the early days of computer, there were no terminals. You entered data via punch-cards. A "C" in the first line on the punch card indicated a comment line. The next 4 spaces were reserved for line numbers and the 6th space indicated that the current line is a continuation of the previous line. This is needed because punch cards were only 80 characters wide. So, any line longer than 72 characters would be chopped off! Because of this legacy, lines of fortran are sometimes called "Cards"









, For example, "Hello, World" could be written as


 ! HELLO.F90 -- HELLO WORLD PROGRAM
 ! PUBLIC DOMAIN
PROGRAM HELLO
WRITE (*, *) 'Hello, World!' ! Display 'Hello, World'
END PROGRAM
Fortran

, Typically, this is done by issuing the commands (the > indicates the command line prompt)

>f77 -c main.f
and
>f77 -c morestuff.f
which generates the files: main.o and morestuff.o
then
f77 -o killerap.x main.o morestuff.o
which links main.o and morestuff.o to make your killerap.x. The -c and -o flags are pretty common...but you should read up on compilation flags for your particular compiler.;
, However, most compilers include optimization algorithms that improve things even more. These are typically turned on by including a -O , -O2, or -O3 flag when compiling (again depending upon your version of fortran).

Generally, the lowest level -O or -O2 level is best. Be aware that using the more aggressive optimization option can introduce errors in complex codes and may even slow things down! TEST YOUR CODE.







